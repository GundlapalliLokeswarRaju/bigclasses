import {
  createTypedArray,
} from '../../utils/helpers/arrays';
import Matrix from '../../3rd_party/transformation-matrix';

function CanvasContext() {
  this.opacity = -1;
  this.transform = createTypedArray('float32', 16);
  this.fillStyle = '';
  this.strokeStyle = '';
  this.lineWidth = '';
  this.lineCap = '';
  this.lineJoin = '';
  this.miterLimit = '';
  this.id = Math.random();
}

function CVContextData() {
  this.stack = [];
  this.cArrPos = 0;
  this.cTr = new Matrix();
  var i;
  var len = 15;
  for (i = 0; i < len; i += 1) {
    var canvasContext = new CanvasContext();
    this.stack[i] = canvasContext;
  }
  this._length = len;
  this.nativeContext = null;
  this.transformMat = new Matrix();
  this.currentOpacity = 1;
  //
  this.currentFillStyle = '';
  this.appliedFillStyle = '';
  //
  this.currentStrokeStyle = '';
  this.appliedStrokeStyle = '';
  //
  this.currentLineWidth = '';
  this.appliedLineWidth = '';
  //
  this.currentLineCap = '';
  this.appliedLineCap = '';
  //
  this.currentLineJoin = '';
  this.appliedLineJoin = '';
  //
  this.appliedMiterLimit = '';
  this.currentMiterLimit = '';
}

CVContextData.prototype.duplicate = function () {
  var newLength = this._length * 2;
  var i = 0;
  for (i = this._length; i < newLength; i += 1) {
    this.stack[i] = new CanvasContext();
  }
  this._length = newLength;
};

CVContextData.prototype.reset = function () {
  this.cArrPos = 0;
  this.cTr.reset();
  this.stack[this.cArrPos].opacity = 1;
};

CVContextData.prototype.restore = function (forceRestore) {
  this.cArrPos -= 1;
  var currentContext = this.stack[this.cArrPos];
  var transform = currentContext.transform;
  var i;
  var arr = this.cTr.props;
  for (i = 0; i < 16; i += 1) {
    arr[i] = transform[i];
  }
  if (forceRestore) {
    this.nativeContext.restore();
    var prevStack = this.stack[this.cArrPos + 1];
    this.appliedFillStyle = prevStack.fillStyle;
    this.appliedStrokeStyle = prevStack.strokeStyle;
    this.appliedLineWidth = prevStack.lineWidth;
    this.appliedLineCap = prevStack.lineCap;
    this.appliedLineJoin = prevStack.lineJoin;
    this.appliedMiterLimit = prevStack.miterLimit;
  }
  this.nativeContext.setTransform(transform[0], transform[1], transform[4], transform[5], transform[12], transform[13]);
  if (forceRestore || (currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity)) {
    this.nativeContext.globalAlpha = currentContext.opacity;
    this.currentOpacity = currentContext.opacity;
  }
  this.currentFillStyle = currentContext.fillStyle;
  this.currentStrokeStyle = currentContext.strokeStyle;
  this.currentLineWidth = currentContext.lineWidth;
  this.currentLineCap = currentContext.lineCap;
  this.currentLineJoin = currentContext.lineJoin;
  this.currentMiterLimit = currentContext.miterLimit;
};

CVContextData.prototype.save = function (